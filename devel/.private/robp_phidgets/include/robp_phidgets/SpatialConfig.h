//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the robp_phidgets package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __robp_phidgets__SPATIALCONFIG_H__
#define __robp_phidgets__SPATIALCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace robp_phidgets
{
  class SpatialConfigStatics;

  class SpatialConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(SpatialConfig &config, const SpatialConfig &max, const SpatialConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const SpatialConfig &config1, const SpatialConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, SpatialConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const SpatialConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, SpatialConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const SpatialConfig &config) const = 0;
      virtual void getValue(const SpatialConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T SpatialConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T SpatialConfig::* field;

      virtual void clamp(SpatialConfig &config, const SpatialConfig &max, const SpatialConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const SpatialConfig &config1, const SpatialConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, SpatialConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const SpatialConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, SpatialConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const SpatialConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const SpatialConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, SpatialConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, SpatialConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<SpatialConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(SpatialConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("frame_id"==(*_i)->name){frame_id = boost::any_cast<std::string>(val);}
        if("data_rate"==(*_i)->name){data_rate = boost::any_cast<double>(val);}
        if("algorithm"==(*_i)->name){algorithm = boost::any_cast<int>(val);}
        if("ahrs_angular_velocity_threshold"==(*_i)->name){ahrs_angular_velocity_threshold = boost::any_cast<double>(val);}
        if("ahrs_angular_velocity_delta_threshold"==(*_i)->name){ahrs_angular_velocity_delta_threshold = boost::any_cast<double>(val);}
        if("ahrs_acceleration_threshold"==(*_i)->name){ahrs_acceleration_threshold = boost::any_cast<double>(val);}
        if("ahrs_mag_time"==(*_i)->name){ahrs_mag_time = boost::any_cast<double>(val);}
        if("ahrs_accel_time"==(*_i)->name){ahrs_accel_time = boost::any_cast<double>(val);}
        if("ahrs_bias_time"==(*_i)->name){ahrs_bias_time = boost::any_cast<double>(val);}
        if("heating_enabled"==(*_i)->name){heating_enabled = boost::any_cast<bool>(val);}
        if("linear_acceleration_stdev"==(*_i)->name){linear_acceleration_stdev = boost::any_cast<double>(val);}
        if("angular_velocity_stdev"==(*_i)->name){angular_velocity_stdev = boost::any_cast<double>(val);}
        if("magnetic_field_stdev"==(*_i)->name){magnetic_field_stdev = boost::any_cast<double>(val);}
        if("time_resynchronization_interval_ms"==(*_i)->name){time_resynchronization_interval_ms = boost::any_cast<int>(val);}
        if("cc_mag_field"==(*_i)->name){cc_mag_field = boost::any_cast<double>(val);}
        if("cc_offset0"==(*_i)->name){cc_offset0 = boost::any_cast<double>(val);}
        if("cc_offset1"==(*_i)->name){cc_offset1 = boost::any_cast<double>(val);}
        if("cc_offset2"==(*_i)->name){cc_offset2 = boost::any_cast<double>(val);}
        if("cc_gain0"==(*_i)->name){cc_gain0 = boost::any_cast<double>(val);}
        if("cc_gain1"==(*_i)->name){cc_gain1 = boost::any_cast<double>(val);}
        if("cc_gain2"==(*_i)->name){cc_gain2 = boost::any_cast<double>(val);}
        if("cc_t0"==(*_i)->name){cc_t0 = boost::any_cast<double>(val);}
        if("cc_t1"==(*_i)->name){cc_t1 = boost::any_cast<double>(val);}
        if("cc_t2"==(*_i)->name){cc_t2 = boost::any_cast<double>(val);}
        if("cc_t3"==(*_i)->name){cc_t3 = boost::any_cast<double>(val);}
        if("cc_t4"==(*_i)->name){cc_t4 = boost::any_cast<double>(val);}
        if("cc_t5"==(*_i)->name){cc_t5 = boost::any_cast<double>(val);}
      }
    }

    std::string frame_id;
double data_rate;
int algorithm;
double ahrs_angular_velocity_threshold;
double ahrs_angular_velocity_delta_threshold;
double ahrs_acceleration_threshold;
double ahrs_mag_time;
double ahrs_accel_time;
double ahrs_bias_time;
bool heating_enabled;
double linear_acceleration_stdev;
double angular_velocity_stdev;
double magnetic_field_stdev;
int time_resynchronization_interval_ms;
double cc_mag_field;
double cc_offset0;
double cc_offset1;
double cc_offset2;
double cc_gain0;
double cc_gain1;
double cc_gain2;
double cc_t0;
double cc_t1;
double cc_t2;
double cc_t3;
double cc_t4;
double cc_t5;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string frame_id;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double data_rate;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int algorithm;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ahrs_angular_velocity_threshold;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ahrs_angular_velocity_delta_threshold;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ahrs_acceleration_threshold;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ahrs_mag_time;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ahrs_accel_time;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ahrs_bias_time;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool heating_enabled;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double linear_acceleration_stdev;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double angular_velocity_stdev;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double magnetic_field_stdev;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int time_resynchronization_interval_ms;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cc_mag_field;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cc_offset0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cc_offset1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cc_offset2;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cc_gain0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cc_gain1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cc_gain2;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cc_t0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cc_t1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cc_t2;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cc_t3;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cc_t4;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cc_t5;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("SpatialConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const SpatialConfig &__max__ = __getMax__();
      const SpatialConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const SpatialConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const SpatialConfig &__getDefault__();
    static const SpatialConfig &__getMax__();
    static const SpatialConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const SpatialConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void SpatialConfig::ParamDescription<std::string>::clamp(SpatialConfig &config, const SpatialConfig &max, const SpatialConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class SpatialConfigStatics
  {
    friend class SpatialConfig;

    SpatialConfigStatics()
    {
SpatialConfig::GroupDescription<SpatialConfig::DEFAULT, SpatialConfig> Default("Default", "", 0, 0, true, &SpatialConfig::groups);
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.frame_id = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.frame_id = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.frame_id = "imu_link";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<std::string>("frame_id", "str", 0, "The header frame ID to use when publishing messages", "", &SpatialConfig::frame_id)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<std::string>("frame_id", "str", 0, "The header frame ID to use when publishing messages", "", &SpatialConfig::frame_id)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.data_rate = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.data_rate = 500.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.data_rate = 500.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("data_rate", "double", 0, "The number of milliseconds between acquisitions of data on the device", "", &SpatialConfig::data_rate)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("data_rate", "double", 0, "The number of milliseconds between acquisitions of data on the device", "", &SpatialConfig::data_rate)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.algorithm = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.algorithm = 2;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.algorithm = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<int>("algorithm", "int", 0, "Name of the spatial algorithm used for orientation estimation, only used if use_orientation is set to true", "{'enum': [{'name': 'None', 'type': 'int', 'value': 0, 'srcline': 8, 'srcfile': '/home/robot/dd2419_ws/src/robp_robot/robp_phidgets/cfg/Spatial.cfg', 'description': 'No AHRS algorithm is used', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'AHRS', 'type': 'int', 'value': 1, 'srcline': 9, 'srcfile': '/home/robot/dd2419_ws/src/robp_robot/robp_phidgets/cfg/Spatial.cfg', 'description': 'AHRS algorithm, incorporating magnetometer data for yaw correction', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'IMU', 'type': 'int', 'value': 2, 'srcline': 10, 'srcfile': '/home/robot/dd2419_ws/src/robp_robot/robp_phidgets/cfg/Spatial.cfg', 'description': 'IMU algorithm, using gyro and accelerometer, but not magnetometer', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Controls the AHRS algorithm'}", &SpatialConfig::algorithm)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<int>("algorithm", "int", 0, "Name of the spatial algorithm used for orientation estimation, only used if use_orientation is set to true", "{'enum': [{'name': 'None', 'type': 'int', 'value': 0, 'srcline': 8, 'srcfile': '/home/robot/dd2419_ws/src/robp_robot/robp_phidgets/cfg/Spatial.cfg', 'description': 'No AHRS algorithm is used', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'AHRS', 'type': 'int', 'value': 1, 'srcline': 9, 'srcfile': '/home/robot/dd2419_ws/src/robp_robot/robp_phidgets/cfg/Spatial.cfg', 'description': 'AHRS algorithm, incorporating magnetometer data for yaw correction', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'IMU', 'type': 'int', 'value': 2, 'srcline': 10, 'srcfile': '/home/robot/dd2419_ws/src/robp_robot/robp_phidgets/cfg/Spatial.cfg', 'description': 'IMU algorithm, using gyro and accelerometer, but not magnetometer', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Controls the AHRS algorithm'}", &SpatialConfig::algorithm)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ahrs_angular_velocity_threshold = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ahrs_angular_velocity_threshold = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ahrs_angular_velocity_threshold = 0.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("ahrs_angular_velocity_threshold", "double", 0, "Parameter for AHRS orientation estimation, only used if use_orientation is set to true", "", &SpatialConfig::ahrs_angular_velocity_threshold)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("ahrs_angular_velocity_threshold", "double", 0, "Parameter for AHRS orientation estimation, only used if use_orientation is set to true", "", &SpatialConfig::ahrs_angular_velocity_threshold)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ahrs_angular_velocity_delta_threshold = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ahrs_angular_velocity_delta_threshold = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ahrs_angular_velocity_delta_threshold = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("ahrs_angular_velocity_delta_threshold", "double", 0, "Parameter for AHRS orientation estimation, only used if use_orientation is set to true", "", &SpatialConfig::ahrs_angular_velocity_delta_threshold)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("ahrs_angular_velocity_delta_threshold", "double", 0, "Parameter for AHRS orientation estimation, only used if use_orientation is set to true", "", &SpatialConfig::ahrs_angular_velocity_delta_threshold)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ahrs_acceleration_threshold = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ahrs_acceleration_threshold = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ahrs_acceleration_threshold = 0.05;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("ahrs_acceleration_threshold", "double", 0, "Parameter for AHRS orientation estimation, only used if use_orientation is set to true", "", &SpatialConfig::ahrs_acceleration_threshold)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("ahrs_acceleration_threshold", "double", 0, "Parameter for AHRS orientation estimation, only used if use_orientation is set to true", "", &SpatialConfig::ahrs_acceleration_threshold)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ahrs_mag_time = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ahrs_mag_time = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ahrs_mag_time = 120.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("ahrs_mag_time", "double", 0, "Parameter for AHRS orientation estimation, only used if use_orientation is set to true", "", &SpatialConfig::ahrs_mag_time)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("ahrs_mag_time", "double", 0, "Parameter for AHRS orientation estimation, only used if use_orientation is set to true", "", &SpatialConfig::ahrs_mag_time)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ahrs_accel_time = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ahrs_accel_time = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ahrs_accel_time = 120.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("ahrs_accel_time", "double", 0, "Parameter for AHRS orientation estimation, only used if use_orientation is set to true", "", &SpatialConfig::ahrs_accel_time)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("ahrs_accel_time", "double", 0, "Parameter for AHRS orientation estimation, only used if use_orientation is set to true", "", &SpatialConfig::ahrs_accel_time)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ahrs_bias_time = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ahrs_bias_time = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ahrs_bias_time = 1.25;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("ahrs_bias_time", "double", 0, "Parameter for AHRS orientation estimation, only used if use_orientation is set to true", "", &SpatialConfig::ahrs_bias_time)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("ahrs_bias_time", "double", 0, "Parameter for AHRS orientation estimation, only used if use_orientation is set to true", "", &SpatialConfig::ahrs_bias_time)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.heating_enabled = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.heating_enabled = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.heating_enabled = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<bool>("heating_enabled", "bool", 0, "Use the internal heating element", "", &SpatialConfig::heating_enabled)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<bool>("heating_enabled", "bool", 0, "Use the internal heating element", "", &SpatialConfig::heating_enabled)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.linear_acceleration_stdev = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.linear_acceleration_stdev = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.linear_acceleration_stdev = 280.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("linear_acceleration_stdev", "double", 0, "The standard deviation to use for the linear acceleration when publishing the message (ug)", "", &SpatialConfig::linear_acceleration_stdev)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("linear_acceleration_stdev", "double", 0, "The standard deviation to use for the linear acceleration when publishing the message (ug)", "", &SpatialConfig::linear_acceleration_stdev)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.angular_velocity_stdev = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.angular_velocity_stdev = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.angular_velocity_stdev = 0.095;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("angular_velocity_stdev", "double", 0, "The standard deviation to use for the angular velocity when publishing the message (deg/s)", "", &SpatialConfig::angular_velocity_stdev)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("angular_velocity_stdev", "double", 0, "The standard deviation to use for the angular velocity when publishing the message (deg/s)", "", &SpatialConfig::angular_velocity_stdev)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.magnetic_field_stdev = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.magnetic_field_stdev = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.magnetic_field_stdev = 1.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("magnetic_field_stdev", "double", 0, "The standard deviation to use for the magnetic field when publishing the message (milligauss)", "", &SpatialConfig::magnetic_field_stdev)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("magnetic_field_stdev", "double", 0, "The standard deviation to use for the magnetic field when publishing the message (milligauss)", "", &SpatialConfig::magnetic_field_stdev)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.time_resynchronization_interval_ms = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.time_resynchronization_interval_ms = 100;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.time_resynchronization_interval_ms = 5000;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<int>("time_resynchronization_interval_ms", "int", 0, "The number of milliseconds to wait between resynchronizing the time on the Phidgets spatial with the local time. Larger values have less 'jumps', but will have more timestamp drift. Setting this to 0 disables resynchronization", "", &SpatialConfig::time_resynchronization_interval_ms)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<int>("time_resynchronization_interval_ms", "int", 0, "The number of milliseconds to wait between resynchronizing the time on the Phidgets spatial with the local time. Larger values have less 'jumps', but will have more timestamp drift. Setting this to 0 disables resynchronization", "", &SpatialConfig::time_resynchronization_interval_ms)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cc_mag_field = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cc_mag_field = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cc_mag_field = 0.52859;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_mag_field", "double", 0, "Ambient magnetic field calibration value; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_mag_field)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_mag_field", "double", 0, "Ambient magnetic field calibration value; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_mag_field)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cc_offset0 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cc_offset0 = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cc_offset0 = 0.03921;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_offset0", "double", 0, "Calibration offset value 0; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_offset0)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_offset0", "double", 0, "Calibration offset value 0; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_offset0)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cc_offset1 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cc_offset1 = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cc_offset1 = 0.19441;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_offset1", "double", 0, "Calibration offset value 1; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_offset1)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_offset1", "double", 0, "Calibration offset value 1; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_offset1)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cc_offset2 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cc_offset2 = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cc_offset2 = -0.03493;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_offset2", "double", 0, "Calibration offset value 2; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_offset2)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_offset2", "double", 0, "Calibration offset value 2; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_offset2)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cc_gain0 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cc_gain0 = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cc_gain0 = 1.81704;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_gain0", "double", 0, "Gain offset value 0; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_gain0)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_gain0", "double", 0, "Gain offset value 0; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_gain0)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cc_gain1 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cc_gain1 = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cc_gain1 = 1.81028;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_gain1", "double", 0, "Gain offset value 1; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_gain1)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_gain1", "double", 0, "Gain offset value 1; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_gain1)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cc_gain2 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cc_gain2 = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cc_gain2 = 2.04819;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_gain2", "double", 0, "Gain offset value 2; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_gain2)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_gain2", "double", 0, "Gain offset value 2; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_gain2)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cc_t0 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cc_t0 = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cc_t0 = 0.00142;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_t0", "double", 0, "T offset value 0; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_t0)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_t0", "double", 0, "T offset value 0; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_t0)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cc_t1 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cc_t1 = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cc_t1 = -0.03591;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_t1", "double", 0, "T offset value 1; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_t1)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_t1", "double", 0, "T offset value 1; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_t1)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cc_t2 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cc_t2 = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cc_t2 = 0.0016;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_t2", "double", 0, "T offset value 2; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_t2)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_t2", "double", 0, "T offset value 2; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_t2)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cc_t3 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cc_t3 = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cc_t3 = -0.05038;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_t3", "double", 0, "T offset value 3; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_t3)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_t3", "double", 0, "T offset value 3; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_t3)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cc_t4 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cc_t4 = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cc_t4 = -0.03942;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_t4", "double", 0, "T offset value 4; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_t4)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_t4", "double", 0, "T offset value 4; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_t4)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cc_t5 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cc_t5 = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cc_t5 = -0.05673;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_t5", "double", 0, "T offset value 5; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_t5)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpatialConfig::AbstractParamDescriptionConstPtr(new SpatialConfig::ParamDescription<double>("cc_t5", "double", 0, "T offset value 5; see device's user guide for information on how to calibrate", "", &SpatialConfig::cc_t5)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(SpatialConfig::AbstractGroupDescriptionConstPtr(new SpatialConfig::GroupDescription<SpatialConfig::DEFAULT, SpatialConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<SpatialConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<SpatialConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<SpatialConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    SpatialConfig __max__;
    SpatialConfig __min__;
    SpatialConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const SpatialConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static SpatialConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &SpatialConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const SpatialConfig &SpatialConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const SpatialConfig &SpatialConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const SpatialConfig &SpatialConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<SpatialConfig::AbstractParamDescriptionConstPtr> &SpatialConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<SpatialConfig::AbstractGroupDescriptionConstPtr> &SpatialConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const SpatialConfigStatics *SpatialConfig::__get_statics__()
  {
    const static SpatialConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = SpatialConfigStatics::get_instance();

    return statics;
  }

//#line 8 "/home/robot/dd2419_ws/src/robp_robot/robp_phidgets/cfg/Spatial.cfg"
      const int Spatial_None = 0;
//#line 9 "/home/robot/dd2419_ws/src/robp_robot/robp_phidgets/cfg/Spatial.cfg"
      const int Spatial_AHRS = 1;
//#line 10 "/home/robot/dd2419_ws/src/robp_robot/robp_phidgets/cfg/Spatial.cfg"
      const int Spatial_IMU = 2;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __SPATIALRECONFIGURATOR_H__
